/*
    The semi-colon before the function invocation is a safety net against
    concatenated scripts and/or other plugins which may not be closed properly.

    'undefined' is used because the undefined global variable in ECMAScript 3
    is mutable (ie. it can be changed by someone else). Because we don't pass a
    value to undefined when the anonymyous function is invoked, we ensure that
    undefined is truly undefined. Note, in ECMAScript 5 undefined can no
    longer be modified.

    'window' and 'document' are passed as local variables rather than global.
    This (slightly) quickens the resolution process.
*/
!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof module&&module.exports?module.exports=function(n,e){return void 0===e&&(e="undefined"!=typeof window?require("jquery"):require("jquery")(n)),t(e),e}:t(jQuery)}(function(t){"use strict";function n(n,o){this.$element=n,this.settings=t.extend(i,o),this._defaults=i,this._name=e,this.init()}var e="checkExternalLinks",i={externalLinkClass:"js-external-link",internalLinkClass:"js-internal-link"};t.extend(n.prototype,{init:function(){this.utilityCacheVariables(),this.checkLinks()},checkLinks:function(){var n=this,e=n.utilityParseLink(n.c_currentHref).host;e===n.c_windowLocationHost?t(n.$element).addClass(n._defaults.internalLinkClass):t(n.$element).addClass(n._defaults.externalLinkClass)},utilityCacheVariables:function(){var n=this;n.c_window=window,n.c_windowLocation=n.c_window.location,n.c_windowLocationHref=n.c_windowLocation.href,n.c_windowLocationHost=n.c_windowLocation.host,n.c_windowLocationHostname=n.c_windowLocation.hostname,n.c_currentHref=t(this.$element).attr("href").toString()},utilityParseLink:function(t){var n=document.createElement("a");return n.href=t,{protocol:n.protocol,hostname:n.hostname,port:n.port,pathname:n.pathname,search:n.search,hash:n.hash,host:n.host}},destroy:function(){this.unbindEvents(),this.$element.removeData()}}),t.fn[e]=function(i){return this.each(function(){t.data(this,"plugin_"+e)||t.data(this,"plugin_"+e,new n(this,i))})}});